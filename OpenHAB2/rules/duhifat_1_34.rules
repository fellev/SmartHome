
import org.eclipse.smarthome.model.script.ScriptServiceUtil

val f_Control_AC_Power= [ String _ac_name, String _power_state |
    logInfo("AC name", _ac_name)
    var _Power        = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_Power_"       + _ac_name)
    var _Mode         = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_Mode_"        + _ac_name)
    var _FanSpeed     = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_FanSpeed_"    + _ac_name)
    var _FanAngle     = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_FanAngle_"    + _ac_name)
    var _Temperature  = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_Temperature_" + _ac_name)
    var _Screen       = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_Screen_"      + _ac_name)
    
    if (_power_state == "ON")
    {
        _Power.postUpdate(ON)
    }
    else if (_power_state == "OFF")
    {
        _Power.postUpdate(OFF)
    }
    if ((_power_state == "OFF") || (_power_state == "ON"))
    {
        _Mode.postUpdate(_Mode.state)
        _FanSpeed.postUpdate(_FanSpeed.state)   
        _FanAngle.postUpdate(_FanAngle.state)   
        _Temperature.postUpdate(_Temperature.state)
        _Screen.postUpdate(_Screen.state)          
    }
    null
]

val f_turnOffAll = [|
        sendCommand( LIVINGROOM_Light_RGB_Preset1, "OFF")
        createTimer(now.plusSeconds(4), [
            sendCommand( BEDROOM_Light_RGB_Preset, "OFF")
            createTimer(now.plusSeconds(2), [
                if (Air_Conditioner_PowerMaster_Living.state == ON)
                {
                    sendCommand(Air_Conditioner_PowerMaster_Living, "OFF")
                }
                else
                {
                    postUpdate( Air_Conditioner_Power_Living,       OFF)
                    postUpdate( Air_Conditioner_Mode_Living,        Air_Conditioner_Mode_Living.state)
                    postUpdate( Air_Conditioner_FanSpeed_Living,    Air_Conditioner_FanSpeed_Living.state)
                    postUpdate( Air_Conditioner_FanAngle_Living,    Air_Conditioner_FanAngle_Living.state)
                    postUpdate( Air_Conditioner_Temperature_Living, Air_Conditioner_Temperature_Living.state)
                    postUpdate( Air_Conditioner_Screen_Living,      Air_Conditioner_Screen_Living.state)
                }
                createTimer(now.plusSeconds(2), [
                    if (Air_Conditioner_PowerMaster_KidsRoom.state == ON)
                    {
                        sendCommand(Air_Conditioner_PowerMaster_KidsRoom, "OFF")
                    }
                    else
                    {
                        postUpdate( Air_Conditioner_Power_KidsRoom,       OFF)
                        postUpdate( Air_Conditioner_Mode_KidsRoom,        Air_Conditioner_Mode_KidsRoom.state)
                        postUpdate( Air_Conditioner_FanSpeed_KidsRoom,    Air_Conditioner_FanSpeed_KidsRoom.state)
                        postUpdate( Air_Conditioner_FanAngle_KidsRoom,    Air_Conditioner_FanAngle_KidsRoom.state)
                        postUpdate( Air_Conditioner_Temperature_KidsRoom, Air_Conditioner_Temperature_KidsRoom.state)
                        postUpdate( Air_Conditioner_Screen_KidsRoom,      Air_Conditioner_Screen_KidsRoom.state)
                    }
                    createTimer(now.plusSeconds(2), [
                        if (Air_Conditioner_PowerMaster_BedRoom.state == ON)
                        {
                            sendCommand(Air_Conditioner_PowerMaster_BedRoom, "OFF")
                        }
                        else
                        {
                            postUpdate( Air_Conditioner_Power_BedRoom,       OFF)
                            postUpdate( Air_Conditioner_Mode_BedRoom,        Air_Conditioner_Mode_BedRoom.state)
                            postUpdate( Air_Conditioner_FanSpeed_BedRoom,    Air_Conditioner_FanSpeed_BedRoom.state)
                            postUpdate( Air_Conditioner_FanAngle_BedRoom,    Air_Conditioner_FanAngle_BedRoom.state)
                            postUpdate( Air_Conditioner_Temperature_BedRoom, Air_Conditioner_Temperature_BedRoom.state)
                            postUpdate( Air_Conditioner_Screen_BedRoom,      Air_Conditioner_Screen_BedRoom.state)
                        }                         
                        createTimer(now.plusSeconds(1), [
                            sendCommand( WaterHeater_Power, "OFF")
                        ])
                    ])
                ])
            ])
        ])        
        null
]

var f_AC_Power_Control = [ String _ac_name, GenericItem _ht_temperature |

    //logInfo("f_AC_Power_Control", "Temperature %1$.1fÂ°C", _ht_temperature.state)
    logInfo("f_AC_Power_Control.ac_name", _ac_name)
    
    var _Air_Conditioner_MinTemp        = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_MinTemp_"       + _ac_name)
    var _Air_Conditioner_MaxTemp        = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_MaxTemp_"       + _ac_name)
    var _Air_Conditioner_Power          = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_Power_"         + _ac_name)
    var _Air_Conditioner_PowerOff       = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_PowerOff_"      + _ac_name)
    var _Air_Conditioner_PowerMaster    = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_PowerMaster_"   + _ac_name)
    var _Air_Conditioner_PowerMaster1   = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_PowerMaster1_"  + _ac_name)
    var _Air_Conditioner_PowerMode      = ScriptServiceUtil.getItemRegistry.getItem("Air_Conditioner_PowerMode_"     + _ac_name)    
    
    
    if ((_Air_Conditioner_PowerMode.state == "1") && (_Air_Conditioner_PowerMaster.state == ON)) //Auto
    {
        val temp = _ht_temperature.state as DecimalType
        val minTemp = _Air_Conditioner_MinTemp.state as DecimalType
        val maxTemp = _Air_Conditioner_MaxTemp.state as DecimalType
        if (temp <= minTemp)
        {
            if (_Air_Conditioner_Power.state == ON)
            {
                sendCommand(_Air_Conditioner_Power, "OFF")
            }
            /* In case current power is OFF, send AC OFF command anyway */
            else if ((_Air_Conditioner_Power.state == OFF) && (_Air_Conditioner_PowerMaster1.state != _Air_Conditioner_PowerMaster.state))
            {
                sendCommand(_Air_Conditioner_PowerOff, "ON")
            }                   
        }
        else if (temp >= maxTemp)
        {
            sendCommand(_Air_Conditioner_Power, "ON")
        }
    }
    else
    {
        logInfo("f_AC_Power_Control", "Step 1")
        if (_Air_Conditioner_PowerMaster.state == ON)
        {
            sendCommand(_Air_Conditioner_Power, "ON")
        }
        else if (_Air_Conditioner_PowerMaster.state == OFF)
        {
            if (_Air_Conditioner_Power.state == ON)
            {
                sendCommand(_Air_Conditioner_Power, "OFF")
            }
            /* In case current power is OFF, send AC OFF command anyway */
            else if ((_Air_Conditioner_Power.state == OFF) && (_Air_Conditioner_PowerMaster1.state != _Air_Conditioner_PowerMaster.state))
            {
                sendCommand(_Air_Conditioner_PowerOff, "ON")
            }
        }
    }
    
    logInfo("f_AC_Power_Control", "Step 2")
    _Air_Conditioner_PowerMaster1.state = _Air_Conditioner_PowerMaster.state
    logInfo("f_AC_Power_Control", "Step 3")
    null
]

rule "Livingroom Set RGB value"
when
        Item LIVINGROOM_Light_RGB changed
then
        var HSBType hsbValue = LIVINGROOM_Light_RGB.state as HSBType
        postUpdate( LIVINGROOM_Light_R, hsbValue.red.intValue )
        postUpdate( LIVINGROOM_Light_G, hsbValue.green.intValue )
        postUpdate( LIVINGROOM_Light_B, hsbValue.blue.intValue )
end

rule "Bedroom RGB Preset purple faint light"
    when
        Item LIVINGROOM_Light_RGB_Preset1 received command 
    then
       
        if(receivedCommand == ON)
        {
            postUpdate( LIVINGROOM_Light_R, 100 )
            postUpdate( LIVINGROOM_Light_G, 47 )
            postUpdate( LIVINGROOM_Light_B, 20 )
        }
        else 
        {
            postUpdate( LIVINGROOM_Light_R, 0 )
            postUpdate( LIVINGROOM_Light_G, 0 )
            postUpdate( LIVINGROOM_Light_B, 0 )           
        }
end       

rule "Bedroom Set RGB value"
when
        Item BEDROOM_Light_RGB changed
then
        var HSBType hsbValue = BEDROOM_Light_RGB.state as HSBType
        postUpdate( BEDROOM_Light_R, hsbValue.red.intValue )
        postUpdate( BEDROOM_Light_G, hsbValue.green.intValue )
        postUpdate( BEDROOM_Light_B, hsbValue.blue.intValue )
end

rule "Bedroom RGB Preset"
    when
        Item BEDROOM_Light_RGB_Preset received command 
    then
       
        if(receivedCommand == ON)
        {
            if (BEDROOM_Light_RGB_Color_Preset.state == "0") // White
            {
                postUpdate( BEDROOM_Light_R, 100 )
                postUpdate( BEDROOM_Light_G, 47 )
                postUpdate( BEDROOM_Light_B, 20 )
            }
            else if (BEDROOM_Light_RGB_Color_Preset.state == "1") // Purple lite
            {
                postUpdate( BEDROOM_Light_R, 1 )
                postUpdate( BEDROOM_Light_G, 0 )
                postUpdate( BEDROOM_Light_B, 1 )                
            }
            else if (BEDROOM_Light_RGB_Color_Preset.state == "2") // Pink
            {
                postUpdate( BEDROOM_Light_R, 2 )
                postUpdate( BEDROOM_Light_G, 1 )
                postUpdate( BEDROOM_Light_B, 1 )                
            }            
        }
        else 
        {
            postUpdate( BEDROOM_Light_R, 0 )
            postUpdate( BEDROOM_Light_G, 0 )
            postUpdate( BEDROOM_Light_B, 0 )            
        }
end

rule "Bedroom RGB Preset Chnage"
    when
            Item BEDROOM_Light_RGB_Color_Preset changed
    then
            sendCommand(BEDROOM_Light_RGB_Preset, "ON");
end

rule "LivingRoom AC"
when
        Item Air_Conditioner_Power_Living changed or 
        Item Air_Conditioner_Mode_Living changed or
        Item Air_Conditioner_FanSpeed_Living changed or
        Item Air_Conditioner_FanAngle_Living changed or
        Item Air_Conditioner_Temperature_Living changed or
        Item Air_Conditioner_Screen_Living changed
then
//        logInfo("Air Conditioner LivingRoom",receivedCommand + "" +Air_Conditioner_Mode_Living )
        postUpdate( Air_Conditioner_Power_Living,       Air_Conditioner_Power_Living.state)
        postUpdate( Air_Conditioner_Mode_Living,        Air_Conditioner_Mode_Living.state)
        postUpdate( Air_Conditioner_FanSpeed_Living,    Air_Conditioner_FanSpeed_Living.state)
        postUpdate( Air_Conditioner_FanAngle_Living,    Air_Conditioner_FanAngle_Living.state)
        postUpdate( Air_Conditioner_Temperature_Living, Air_Conditioner_Temperature_Living.state)
        postUpdate( Air_Conditioner_Screen_Living,      Air_Conditioner_Screen_Living.state)
end

rule "KidsRoom AC"
when
        Item Air_Conditioner_Power_KidsRoom changed or 
        Item Air_Conditioner_Mode_KidsRoom changed or
        Item Air_Conditioner_FanSpeed_KidsRoom changed or
        Item Air_Conditioner_FanAngle_KidsRoom changed or
        Item Air_Conditioner_Temperature_KidsRoom changed or
        Item Air_Conditioner_Screen_KidsRoom changed
then
//        logInfo("Air Conditioner KidsRoom",receivedCommand + "" +Air_Conditioner_Mode_KidsRoom )
        postUpdate( Air_Conditioner_Power_KidsRoom,       Air_Conditioner_Power_KidsRoom.state)
        postUpdate( Air_Conditioner_Mode_KidsRoom,        Air_Conditioner_Mode_KidsRoom.state)
        postUpdate( Air_Conditioner_FanSpeed_KidsRoom,    Air_Conditioner_FanSpeed_KidsRoom.state)
        postUpdate( Air_Conditioner_FanAngle_KidsRoom,    Air_Conditioner_FanAngle_KidsRoom.state)
        postUpdate( Air_Conditioner_Temperature_KidsRoom, Air_Conditioner_Temperature_KidsRoom.state)
        postUpdate( Air_Conditioner_Screen_KidsRoom,      Air_Conditioner_Screen_KidsRoom.state)
end

rule "BedRoom AC"
when
        Item Air_Conditioner_Power_BedRoom changed or 
        Item Air_Conditioner_Mode_BedRoom changed or
        Item Air_Conditioner_FanSpeed_BedRoom changed or
        Item Air_Conditioner_FanAngle_BedRoom changed or
        Item Air_Conditioner_Temperature_BedRoom changed or
        Item Air_Conditioner_Screen_BedRoom changed
then
//        logInfo("Air Conditioner BedRoom",receivedCommand + "" +Air_Conditioner_Mode_BedRoom )
        postUpdate( Air_Conditioner_Power_BedRoom,       Air_Conditioner_Power_BedRoom.state)
        postUpdate( Air_Conditioner_Mode_BedRoom,        Air_Conditioner_Mode_BedRoom.state)
        postUpdate( Air_Conditioner_FanSpeed_BedRoom,    Air_Conditioner_FanSpeed_BedRoom.state)
        postUpdate( Air_Conditioner_FanAngle_BedRoom,    Air_Conditioner_FanAngle_BedRoom.state)
        postUpdate( Air_Conditioner_Temperature_BedRoom, Air_Conditioner_Temperature_BedRoom.state)
        postUpdate( Air_Conditioner_Screen_BedRoom,      Air_Conditioner_Screen_BedRoom.state)
end

rule "Office AC"
when
        Item Air_Conditioner_Power_Office changed or 
        Item Air_Conditioner_Mode_Office changed or
        Item Air_Conditioner_FanSpeed_Office changed or
        Item Air_Conditioner_FanAngle_Office changed or
        Item Air_Conditioner_Temperature_Office changed or
        Item Air_Conditioner_Screen_Office changed
then
        postUpdate( Air_Conditioner_Power_Office,       Air_Conditioner_Power_Office.state)
        postUpdate( Air_Conditioner_Mode_Office,        Air_Conditioner_Mode_Office.state)
        postUpdate( Air_Conditioner_FanSpeed_Office,    Air_Conditioner_FanSpeed_Office.state)
        postUpdate( Air_Conditioner_FanAngle_Office,    Air_Conditioner_FanAngle_Office.state)
        postUpdate( Air_Conditioner_Temperature_Office, Air_Conditioner_Temperature_Office.state)
        postUpdate( Air_Conditioner_Screen_Office,      Air_Conditioner_Screen_Office.state)
end

rule "Water Heater On With Timer"
    when
        Item WaterHeater_Power received command 
    then
        if(receivedCommand == ON)
        {
	    postUpdate( WaterHeater_Timer_Post, String::format("TMR%s",WaterHeater_Set_Timer.state) )
        }
        else if(receivedCommand == OFF)
        {
            postUpdate( WaterHeater_Timer_Post, "OFF")
        }
end

rule "Water Heater Off from device"
    when
	Item WaterHeater_Power_Status changed
    then
	if(WaterHeater_Power_Status.state == OFF)
	{
	  sendCommand( WaterHeater_Power, "OFF")
	  sendCommand( WaterHeater_Time_Left, 0)
	}
end

rule "Water Heater Update Timer"
    when 
	Item WaterHeater_Set_Timer changed
    then
        //logInfo("WaterHeater_Set_Timer changed", "WaterHeater_Power_Status.state=[{}]", WaterHeater_Power)
	if (WaterHeater_Power.state == ON)
	{
	    sendCommand( WaterHeater_Power, "ON")
	}
end

rule "Mijia & Aqara Wireless Switch"
when
    Channel "mihome:sensor_switch:158d000361568f:button" triggered
then
    var actionName = receivedEvent.getEvent()
    switch(actionName) {
        case "SHORT_PRESSED": {
            if (LIVINGROOM_Light_RGB_Preset1.state == OFF)
            {
                sendCommand( LIVINGROOM_Light_RGB_Preset1, "ON")
            }
            else
            {
                sendCommand( LIVINGROOM_Light_RGB_Preset1, "OFF")
            }
        }
        case "DOUBLE_PRESSED": {
            //<ACTION>
        }
        case "LONG_PRESSED": {
            f_turnOffAll.apply()
        }
        case "LONG_RELEASED": {
            //<ACTION>
        }
    }
end

rule "Office AC PWR control"
    when
            Item HT_Temperature_Office changed or
            Item Air_Conditioner_MinTemp_Office changed or
            Item Air_Conditioner_MaxTemp_Office changed or 
            Item Air_Conditioner_PowerMaster_Office changed or
            Item Air_Conditioner_PowerMode_Office changed
    then
            logInfo("AC_Office.rules", "One of the item was changed")
            //logError("AC_Office.rules", "Temperature %1$.1fÂ°C", TH_Sensor3.state)
            //logDebug("AC_Office.rules", "Temperature %1$.1fÂ°C", TH_Sensor3.state)
            
//            if ((Air_Conditioner_PowerMode_Office.state == "1") && (Air_Conditioner_PowerMaster_Office.state == ON)) //Auto
//            {
//                val temp = HT_Temperature_Office.state as DecimalType
//                val minTemp = Air_Conditioner_MinTemp_Office.state as DecimalType
//                val maxTemp = Air_Conditioner_MaxTemp_Office.state as DecimalType
//                if (temp <= minTemp)
//                {
//                    if (Air_Conditioner_Power_Office.state == ON)
//                    {
//                        sendCommand(Air_Conditioner_Power_Office, "OFF")
//                    }
//                    /* In case current power is OFF, send AC OFF command anyway */
//                    else if ((Air_Conditioner_Power_Office.state == OFF) && (Air_Conditioner_PowerMaster1_Office.state != Air_Conditioner_PowerMaster_Office.state))
//                    {
//                        sendCommand(Air_Conditioner_PowerOff_Office, "ON")
//                    }                   
//                }
//                else if (temp >= maxTemp)
//                {
//                    sendCommand(Air_Conditioner_Power_Office, "ON")
//                }
//            }
//            else
//            {
//                if (Air_Conditioner_PowerMaster_Office.state == ON)
//                {
//                    sendCommand(Air_Conditioner_Power_Office, "ON")
//                }
//                else if (Air_Conditioner_PowerMaster_Office.state == OFF)
//                {
//                    if (Air_Conditioner_Power_Office.state == ON)
//                    {
//                        sendCommand(Air_Conditioner_Power_Office, "OFF")
//                    }
//                    /* In case current power is OFF, send AC OFF command anyway */
//                    else if ((Air_Conditioner_Power_Office.state == OFF) && (Air_Conditioner_PowerMaster1_Office.state != Air_Conditioner_PowerMaster_Office.state))
//                    {
//                        sendCommand(Air_Conditioner_PowerOff_Office, "ON")
//                    }
//                }
//            }
//            Air_Conditioner_PowerMaster1_Office.state = Air_Conditioner_PowerMaster_Office.state
            f_AC_Power_Control.apply("Office", HT_Temperature_Office)
end

rule "Living Room AC PWR control"
    when
            Item TH_Sensor3 changed or
            Item Air_Conditioner_MinTemp_Living changed or
            Item Air_Conditioner_MaxTemp_Living changed or 
            Item Air_Conditioner_PowerMaster_Living changed or
            Item Air_Conditioner_PowerMode_Living changed
    then
            if ((Air_Conditioner_PowerMode_Living.state == "1") && (Air_Conditioner_PowerMaster_Living.state == ON)) //Auto
            {
                val temp = (TH_Sensor3.state as QuantityType<Number>).doubleValue
                val minTemp = Air_Conditioner_MinTemp_Living.state as DecimalType
                val maxTemp = Air_Conditioner_MaxTemp_Living.state as DecimalType
                if (temp <= minTemp)
                {
                    sendCommand(Air_Conditioner_Power_Living, "OFF")
                }
                else if (temp >= maxTemp)
                {
                    sendCommand(Air_Conditioner_Power_Living, "ON")
                }
            }
            else
            {
                if (Air_Conditioner_PowerMaster_Living.state == ON)
                {
                    sendCommand(Air_Conditioner_Power_Living, "ON")
                }
                else if (Air_Conditioner_PowerMaster_Living.state == OFF)
                {
                    if (Air_Conditioner_Power_Living.state == ON)
                    {
                        sendCommand(Air_Conditioner_Power_Living, "OFF")
                    }
                }
            }
end

rule "BedRoom AC PWR control"
    when
            Item XIAOMI_TEMPERATURE_SENSOR_TEMPERATURE changed or
            Item Air_Conditioner_MinTemp_BedRoom changed or
            Item Air_Conditioner_MaxTemp_BedRoom changed or 
            Item Air_Conditioner_PowerMaster_BedRoom changed or
            Item Air_Conditioner_PowerMode_BedRoom changed
    then
            if ((Air_Conditioner_PowerMode_BedRoom.state == "1") && (Air_Conditioner_PowerMaster_BedRoom.state == ON)) //Auto
            {
                val temp = (XIAOMI_TEMPERATURE_SENSOR_TEMPERATURE.state as QuantityType<Number>).doubleValue
                val minTemp = Air_Conditioner_MinTemp_BedRoom.state as DecimalType
                val maxTemp = Air_Conditioner_MaxTemp_BedRoom.state as DecimalType
                if (temp <= minTemp)
                {
                    sendCommand(Air_Conditioner_Power_BedRoom, "OFF")
                }
                else if (temp >= maxTemp)
                {
                    sendCommand(Air_Conditioner_Power_BedRoom, "ON")
                }
            }
            else
            {
                if (Air_Conditioner_PowerMaster_BedRoom.state == ON)
                {
                    sendCommand(Air_Conditioner_Power_BedRoom, "ON")
                }
                else if (Air_Conditioner_PowerMaster_BedRoom.state == OFF)
                {
                    if (Air_Conditioner_Power_BedRoom.state == ON)
                    {
                        sendCommand(Air_Conditioner_Power_BedRoom, "OFF")
                    }
                }
            }
end

rule "KidsRoom AC PWR control"
    when
            Item TH_Sensor4 changed or
            Item Air_Conditioner_MinTemp_KidsRoom changed or
            Item Air_Conditioner_MaxTemp_KidsRoom changed or 
            Item Air_Conditioner_PowerMaster_KidsRoom changed or
            Item Air_Conditioner_PowerMode_KidsRoom changed
    then
            if ((Air_Conditioner_PowerMode_KidsRoom.state == "1") && (Air_Conditioner_PowerMaster_KidsRoom.state == ON)) //Auto
            {
                val temp = (TH_Sensor4.state as QuantityType<Number>).doubleValue
                val minTemp = Air_Conditioner_MinTemp_KidsRoom.state as DecimalType
                val maxTemp = Air_Conditioner_MaxTemp_KidsRoom.state as DecimalType
                if (temp <= minTemp)
                {
                    sendCommand(Air_Conditioner_Power_KidsRoom, "OFF")
                }
                else if (temp >= maxTemp)
                {
                    sendCommand(Air_Conditioner_Power_KidsRoom, "ON")
                }
            }
            else
            {
                if (Air_Conditioner_PowerMaster_KidsRoom.state == ON)
                {
                    sendCommand(Air_Conditioner_Power_KidsRoom, "ON")
                }
                else if (Air_Conditioner_PowerMaster_KidsRoom.state == OFF)
                {
                    if (Air_Conditioner_Power_KidsRoom.state == ON)
                    {
                        sendCommand(Air_Conditioner_Power_KidsRoom, "OFF")
                    }
                }
            }
end

rule "Turn Off All"
    when 
            Item Turn_Off_All changed
    then
            f_turnOffAll.apply()
            postUpdate( Turn_Off_All, OFF)
end

rule "Turn Off AC Office"
    when 
            Item Air_Conditioner_PowerOff_Office changed
    then
            if (Air_Conditioner_PowerOff_Office.state == ON)
            {
                f_Control_AC_Power.apply("Office", "OFF")
            }
            postUpdate(Air_Conditioner_PowerOff_Office, OFF)
end

rule "Turn Off AC Living Room"
    when 
            Item Air_Conditioner_PowerOff_Living changed
    then
            if (Air_Conditioner_PowerOff_Living.state == ON)
            {
                f_Control_AC_Power.apply("Living", "OFF")
            }
            postUpdate(Air_Conditioner_PowerOff_Living, OFF)
end

rule "Turn Off AC BedRoom"
    when 
            Item Air_Conditioner_PowerOff_BedRoom changed
    then
            if (Air_Conditioner_PowerOff_BedRoom.state == ON)
            {
                f_Control_AC_Power.apply("BedRoom", "OFF")
            }
            postUpdate(Air_Conditioner_PowerOff_BedRoom, OFF)
end

rule "Turn Off AC KidsRoom"
    when 
            Item Air_Conditioner_PowerOff_KidsRoom changed
    then
            if (Air_Conditioner_PowerOff_KidsRoom.state == ON)
            {
                f_Control_AC_Power.apply("KidsRoom", "OFF")
            }
            postUpdate(Air_Conditioner_PowerOff_KidsRoom, OFF)
end

rule "Close all shutters"
    when 
            Item Close_All_Shutters changed
    then
            if (Close_All_Shutters.state == ON)
            {
                Shutter_KidsRoom.sendCommand("DOWN")
                Shutter_BedRoom.sendCommand("DOWN")
                Shutter_Kitchen.sendCommand("DOWN")
            }
            Close_All_Shutters.postUpdate(OFF)
end

rule "Open all shutters"
    when 
            Item Open_All_Shutters changed
    then
            if (Open_All_Shutters.state == ON)
            {
                Shutter_KidsRoom.sendCommand("UP")
                Shutter_BedRoom.sendCommand("UP")
                Shutter_Kitchen.sendCommand("UP")
                Shutter_LivingRoom.sendCommand("UP")
            }
            Open_All_Shutters.postUpdate(OFF)
end

